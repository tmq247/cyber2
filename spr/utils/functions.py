from time import ctime

from pyrogram.errors import (ChatAdminRequired, ChatWriteForbidden,
                             UserAdminInvalid)
from pyrogram.types import Message

from spr import NSFW_LOG_CHANNEL, SPAM_LOG_CHANNEL, spr
from spr.core import ikb
from spr.utils.db import (get_blacklist_event, get_nsfw_count,
                          get_reputation, get_user_trust,
                          increment_nsfw_count, is_user_blacklisted)


async def get_user_info(message):
    user = message.from_user
    trust = get_user_trust(user.id)
    user_ = f"{('@' + user.username) if user.username else user.mention} [`{user.id}`]"
    blacklisted = is_user_blacklisted(user.id)
    reason = None
    if blacklisted:
        reason, time = get_blacklist_event(user.id)
    data = f"""
**Ng∆∞·ªùi d√πng:**  
   **T√™n ng∆∞·ªùi d√πng:** {user_}  
   **ƒê·ªô tin c·∫≠y:** {trust}  
   **C√≥ ph·∫£i spammer:** {True if trust < 50 else False}  
   **Danh ti·∫øng:** {get_reputation(user.id)}  
   **S·ªë l·∫ßn g·ª≠i NSFW:** {get_nsfw_count(user.id)}  
   **C√≥ th·ªÉ l√† spammer:** {True if trust < 70 else False}  
   **B·ªã ƒë∆∞a v√†o danh s√°ch ƒëen:** {is_user_blacklisted(user.id)}  
"""
    data += (
        f"    **L√Ω do b·ªã ƒë∆∞a v√†o danh s√°ch ƒëen:** {reason} | {ctime(time)}"
        if reason
        else ""
    )
    return data


async def delete_get_info(message: Message):
    try:
        await message.delete()
    except (ChatAdminRequired, UserAdminInvalid):
        try:
            return await message.reply_text(
                "T√¥i kh√¥ng ƒë·ªß quy·ªÅn ƒë·ªÉ x√≥a tin nh·∫Øn n√†y "
                + "tin nh·∫Øn b·ªã ƒë√°nh d·∫•u l√† Spam."
            )
        except ChatWriteForbidden:
            return await spr.leave_chat(message.chat.id)
    return await get_user_info(message)


async def delete_nsfw_notify(
    message: Message,
    result,
):
    await message.copy(
        NSFW_LOG_CHANNEL,
        reply_markup=ikb(
            {"ƒê√∫ng": "upvote_nsfw", "Sai": "downvote_nsfw"}
        ),
    )
    info = await delete_get_info(message)
    if not info:
        return
    msg = f"""
üö® **C·∫£nh b√°o NSFW**  üöî
{info}
**D·ª± ƒëo√°n:**
    **An to√†n:** `{result.neutral} %`
    **Porn:** `{result.porn} %`
    **Adult:** `{result.sexy} %`
    **Hentai:** `{result.hentai} %`
    **H√¨nh v·∫Ω:** `{result.drawings} %`
"""
    await spr.send_message(message.chat.id, text=msg)
    increment_nsfw_count(message.from_user.id)


async def delete_spam_notify(
    message: Message,
    spam_probability: float,
):
    info = await delete_get_info(message)
    if not info:
        return
    msg = f"""
üö® **C·∫£nh b√°o SPAM**  üöî
{info}
**X√°c xu·∫•t SPAM:** {spam_probability} %

__Tin nh·∫Øn ƒë√£ b·ªã x√≥a__
"""
    content = message.text or message.caption
    content = content[:400] + "..."
    report = f"""
**Ph√°t hi·ªán SPAM**
{info}
**N·ªôi dung:**
{content}
    """

    keyb = ikb(
        {
            "ƒê√∫ng (0)": "upvote_spam",
            "Sai (0)": "downvote_spam",
            "Chat": "https://t.me/" + (message.chat.username or "SpamProtectionLog/93"),
        },
        2
    )
    m = await spr.send_message(
        SPAM_LOG_CHANNEL,
        report,
        reply_markup=keyb,
        disable_web_page_preview=True,
    )

    keyb = ikb({"Xem tin nh·∫Øn": m.link})
    await spr.send_message(
        message.chat.id, text=msg, reply_markup=keyb
    )


async def kick_user_notify(message: Message):
    try:
        await spr.ban_chat_member(
            message.chat.id, message.from_user.id
        )
    except (ChatAdminRequired, UserAdminInvalid):
        try:
            return await message.reply_text(
                "T√¥i kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ ban "
                + "ng∆∞·ªùi d√πng n√†y ƒë√£ b·ªã ƒë∆∞a v√†o danh s√°ch ƒëen v√† b·ªã ƒë√°nh d·∫•u l√† spammer."
            )
        except ChatWriteForbidden:
            return await spr.leave_chat(message.chat.id)
    info = await get_user_info(message)
    msg = f"""
üö® **C·∫£nh b√°o SPAMMER**  üöî
{info}

__Ng∆∞·ªùi n√†y ƒë√£ b·ªã ban__
"""
    await spr.send_message(message.chat.id, msg)
